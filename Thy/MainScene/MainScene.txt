local util_isNull = util.isNull

---@class MainSceneWidget : Widget
---@field view MainSceneView
---@field activityView MainUIActivityView 活动列表视区
local MainScene = Widget("MainScene", UIConstants.top, "Res/Widgets/MainScene/RefByScript/MainScene", "Base")

---是否显示右导航栏
---@type boolean
local needShowRightMenu
---是否显示左导航栏
---@type boolean
local needShowLeftMenu

------------------------------------------- Public Func -------------------------------------------

function MainScene:Show(args, handler)
    if self:IsInContext() then
        --清除其它弹窗
        self:PopUpper(
            function(widget)
                local manual = widget:HasProperty(UIConstants.manual)
                -- 拥有 manual 属性 和 首页导航栏的界面由业务自己销毁
                if manual or Game.MainUI:IsMainNavigation(widget) then
                    return false
                end
                return true
            end,
            true
        )
    end
    if self:IsActivated() then
        if handler ~= nil and type(handler) == 'function' then
            handler()
        end
        return
    end
    self:Active(
        nil,
        function()
            if handler ~= nil and type(handler) == 'function' then
                handler()
            end
        end
    )
end

---主界面是否存在
---@return boolean
function MainScene:IsViewValid()
    if not self.view or util_isNull(self.view.gameObject) then
        return false
    end
    return true
end

---显示村落相关ui
---@param active boolean
function MainScene:SetMainRootActive(active)
    if not self:IsViewValid() then
        return
    end

    self.view:SetMainRootActive(active)
end

---设置主界面右导航栏显隐状态
---@param state boolean
function MainScene:SetRightMenuState(state)
    needShowRightMenu = state
end

---获取主界面右导航栏显隐状态
---@return boolean
function MainScene:GetRightMenuState()
    return (needShowRightMenu == nil and true or needShowRightMenu)
end

---设置主界面左导航栏显隐状态
---@param state boolean
function MainScene:SetLeftMenuState(state)
    needShowLeftMenu = state
end

---获取主界面左导航栏显隐状态
---@return boolean
function MainScene:GetLeftMenuState()
    return (needShowLeftMenu == nil and true or needShowLeftMenu)
end

------------------------------------------- Private Func -------------------------------------------

---@private
function MainScene:OnEnable()
    ModelFactory.VillageScene:SetData(self, nil)
    ModelFactory.MainSceneNpc:CloseTask()
    Game.MainUI:Show(self, true)
    Game.MainUI:SetToggleState(Game.MainUI.UIType.Village)
    MainSceneMgr:SetMapActive(true)
    self.view:OnEnable2()
end

---@private
function MainScene:OnDisable()
    ModelFactory.MainSceneNpc:OpenTask()
    ModelFactory.VillageScene:ClearScene(false)
    Game.MainUI:Hide()
    MainSceneMgr:SetMapActive(false)
end

---@private
function MainScene:OnBackPressed()
    --true表示已处理，事件不继续往下级界面传;false表示忽略该事件，事件继续往下级界面传
    Game.MessageBox.OpenExitReturnMsgBox(L10nString("退出游戏"), L10nString("是不是真的要离开村庄了？"))
    return true
end

---断线重连，数据模块重载了
---@param mods string [] 本次断线重连后，有重置的数据模块名
---@return boolean 返回true表示这个界面有处理，支持数据重载，返回false表示这个界面无法刷新，会被直接关闭（在栈顶时）, 默认不重写或返回nil时什么都不做。
function MainScene:OnReconnection(mods)
    -- 可以在此回调内刷新对应数据模块的视图，也可以通过监听对应数据模块的onCache事件触发刷新。
    -- 需要注意的是不要在此回调内手动关闭界面
    return true
end

return MainScene
