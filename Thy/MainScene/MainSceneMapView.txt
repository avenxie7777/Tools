--useLuaClass useArgsMeta
local Log = GetLogger("MainSceneView")
local util_relativeRequire = util.relativeRequire
---@type mapUnlockAreaMgr
local MapUnlockAreaMgr = util_relativeRequire("MapUnlockArea.MapUnlockAreaMgr")
local inputMgr = CS.Thy.Runtime.InputMgr.Instance
local InputUtil_PointerOverTargetGameObject = InputUtil.PointerOverTargetGameObject
local GameObjectUtil_Active = GameObjectUtil.Active
local math_ceil = math.ceil

---@class MainSceneMapView:View
local View = Class()
View.args = {
    ---@type UnityEngine.Transform
    tr_PoolRoot = nil,
    ---@type UnityEngine.Transform
    tr_NpcRoot = nil,
    ---@type UnityEngine.Transform
    tr_VillagerRoot = nil,
    ---@type UnityEngine.Transform
    tr_HeroRoot = nil,
    ---@type UnityEngine.Transform
    tr_PolicyRoot = nil,
    ---@type UnityEngine.Transform
    tr_DogFoodRoot = nil,
    ---@type UnityEngine.Transform
    tr_SaveGodRoot = nil,
    ---@type UnityEngine.Transform
    tr_SceneRoot = nil,
    ---@type UnityEngine.Transform
    tr_CloudRoot = nil,
    ---@type UnityEngine.Transform
    tr_BirdRoot = nil,
    ---@type UnityEngine.GameObject
    go_MapGuideUIRoot = nil,
    ---@type XLua.LuaTarget
    lt_MapGuideUI = nil,
    ---@type GizmosUtil
    gizmos_camera = nil,
    ---@type UnityEngine.Camera
    sceneCamera = nil,
    ---@type Thy.Mono.MainSceneUpdateLayer
    uiRoot = nil,
    ---@type NpcPath
    pathDataCom = nil,
    ---@type XLua.LuaTarget
    NpcPopupView = nil,
    ---@type XLua.LuaTarget
    SettingsView = nil,
    ---@type XLua.LuaTarget
    villagerTemplate = nil,
    ---@type XLua.LuaTarget
    heroTemplate = nil,
    ---@type XLua.LuaTarget
    policyNpcTemplate = nil,
    ---@type XLua.LuaTarget
    dogFoodNPCTemplate = nil,
    ---@type XLua.LuaTarget
    saveGodNPCTemplate = nil,
}

---@private
function View:ctor()
    ---@type table<string, UnityEngine.Transform>
    self.sceneRoot = {}
    self.settings = nil
    ---@type number
    self.tilePixles2Unit = nil
    ---@type number
    self.halfTilePixles2Unit = nil

    ---ui相机
    ---@type UnityEngine.Camera
    self.uiCamera = nil
    ---相机移动数据
    ---@type UnityEngine.Vector3
    self.moveDeltaData = Vector3(0, 0, 0)
    -- 地图解锁区域管理类
    ---@type mapUnlockAreaMgr
    self.mapUnlockAreaMgr = nil
    -- 地图数据预制体实例
    ---@type UnityEngine.GameObject
    self.areaInfoInst = nil
    -- 初始相机坐标
    ---@type UnityEngine.Vector3
    self.initCameraPos = nil
    -- 初始相机视野
    ---@type number
    self.initCameraSize = nil
    -- 地图坐标是否初始化
    ---@type boolean
    self.isMapPosInited = nil
    -- 相机移动任务
    ---@type DG.Tweening.Tweener
    self.sceneMoveTweener = nil
    ---指示器对象池
    ---@type ObjectPool
    self.guideUIPool = nil
    ---指示器引用的字典
    ---@type table<string, MapGuideSceneUIView>
    self.guideUIDic = {}
end

---@private
function View:Awake()
    ---@type MainSceneMapSettings
    local settingsView = self.args.SettingsView.Table
    self.settings = settingsView.args
    self.tilePixles2Unit = self.settings.tileWidthPixles / 100
    self.halfTilePixles2Unit = self.tilePixles2Unit / 2
    local localPosition = self.args.sceneCamera.transform.localPosition
    self.initCameraPos = { x = localPosition.x, y = localPosition.y, z = localPosition.z }
    self.initCameraSize = self.args.sceneCamera.orthographicSize
    self.uiCamera = GameObject.Find("UICamera"):GetComponent(typeof(Camera))
    self.screenHeight = Screen.height
    -- 初始化气泡对象池
    ---@type ObjectPool
    self.npcPopupPool = ObjectPool.New()
    self.npcPopupPool:SetParent(self.args.tr_PoolRoot)
    self.npcPopupPool:SetTemplate(self.args.NpcPopupView)

    self:GetDragRate(self.initCameraSize)
    self:AwakeForMapUnlockAreaMgr()
    self:AwakeForAOINpcMgr()
    self:AwakeForResetCameraPos()
    self:AwakeForSkyDecoMgr()
    self:ShowTileMap()
end

---@private
function View:OnEnable()
    ModelFactory.TileMap:InitTileDyncData()
    ModelFactory.MainSceneNpc:Init(self.args.pathDataCom, "")
    ModelFactory.MainSceneNpc:SetMapActive(true)
    self:InitAOINpcMgr()
    self:InitMapGuideUI()
    self:AddListener()
end

---@private
function View:OnDisable()
    ModelFactory.MainSceneNpc:SetMapActive(false)
    self:ShutAOINpcMgr()
    self:DisposeMapGuideUI()
    self:RecycleAllMapGuideUI()
    self:RemoveListener()
end

---@private
function View:OnDestroy()
    self.sceneRoot = nil
    self.uiCamera = nil
    self.moveDeltaData = nil

    if self.guideUIPool then
        self.guideUIPool:Release()
        self.guideUIPool = nil
    end

    self:KillTweener()
    self:KillCSizeChangeForCsTweener()
    self:KillCameraMoveForCsTweener()
    self:CloseAmbleTaskInfo()
    self:DestroyAOINpcMgr()
    self:DestroySkyDecoMgr()
    self:DestroyAreaInfo()
    self:DestroyMapGizmos()
    self:DestroyMapUnlockAreaMgr()
end

------------------------------------- Public Func -------------------------------------

---移动相机到指定位置
---@param worldPos UnityEngine.Vector3 世界坐标
---@param finCallback fun() 完成回调
---@param speed boolean|number 摄像机移动速度,true|nil 为默认速度 false|≤0为瞬移
function View:DoCameraMove(worldPos, finCallback, speed)
    if self.cameraMoveEnd then
        self.cameraMoveEnd()
    end
    ---@type UnityEngine.Vector3
    local targetPos = self.mapUnlockAreaMgr:GetTargetPosForMove(worldPos)
    -- 到了目标位置后刷新
    self.cameraMoveEnd = function()
        self.cameraMoveEnd = nil
        self:KillTweener()
        ViewMgr:ShowMask(false)
        if targetPos then
            self.mapUnlockAreaMgr:SetCameraPos(targetPos)
            self.args.sceneCamera.transform:SetLocalPosition(targetPos.x, targetPos.y, self.initCameraPos.z)
            self:OnCameraFieldChange()
        end
        if finCallback then
            finCallback()
        end
    end
    -- 无法移动到目标点
    if not targetPos then
        Log:Warn(util.stringFormat('[MainSceneView:DoCameraMove] 无法移动到目标位置, x:{0} y:{1}, cameraSize:{2}'
            , worldPos.x, worldPos.y, self.args.sceneCamera.orthographicSize))
        Game.StrongHint:Show(L10nString("无法移动到目标位置"))
        self.cameraMoveEnd()
        return
    end
    -- 默认速度
    if speed == nil or speed == true then
        speed = self.settings.cameraMoveSpeed or 0
    end
    -- 直接瞬移
    if speed == false or speed <= 0 then
        self.cameraMoveEnd()
        return
    end

    ViewMgr:ShowMask(true)
    targetPos.z = self.initCameraPos.z
    local distance = math.abs((targetPos - self.args.sceneCamera.transform.localPosition).magnitude)
    -- 限定最大动画时长，因为遮罩n秒后就自动关闭了
    local duration = distance / speed
    if duration >= ViewMgr.uiMask.delay then
        duration = ViewMgr.uiMask.delay
    end
    self.sceneMoveTweener = self.args.sceneCamera.transform:DOLocalMove(targetPos, duration):SetEase(Ease.Linear)
        :OnUpdate(function()
            self.mapUnlockAreaMgr:SetCameraPos(self.args.sceneCamera.transform.localPosition)
            self:OnCameraFieldChange()
        end)
        :OnComplete(function()
            self.cameraMoveEnd()
        end)
end

---根据位置计算层级
---@param posX number
---@param posY number
---@return number
function View:GetLayerByPos(posX, posY)
    if not self.mapDataForLayer then
        self.mapDataForLayer = { posYRate = 300 }
    end

    -- 是否初始化地图位置数据
    if not self.isMapPosInited then
        -- order in layer 最大层级 为 32767
        self.mapDataForLayer.minMapX = -(self.settings.centerTileX * self.tilePixles2Unit + self.halfTilePixles2Unit)
        self.mapDataForLayer.maxMapX = (self.settings.tileWidthCount - 1 - self.settings.centerTileX) *
            self.tilePixles2Unit + self.halfTilePixles2Unit
        self.mapDataForLayer.minMapY = -(self.settings.tileHeightCount - 1 - self.settings.centerTileY) *
            self.tilePixles2Unit + self.halfTilePixles2Unit
        self.mapDataForLayer.maxMapY = self.settings.centerTileY * self.tilePixles2Unit + self.halfTilePixles2Unit
        -- 提高精度
        self.mapDataForLayer.minMapY = self.mapDataForLayer.minMapY * self.mapDataForLayer.posYRate
        self.mapDataForLayer.maxMapY = self.mapDataForLayer.maxMapY * self.mapDataForLayer.posYRate
        self.isMapPosInited = true
    end

    --保底的层级数
    local baseLayerValue = 3

    --限制最大坐标
    posX = posX > self.mapDataForLayer.maxMapX and self.mapDataForLayer.maxMapX or posX
    posY = posY > self.mapDataForLayer.maxMapY and self.mapDataForLayer.maxMapY or posY

    -- y越小层级越大
    -- x越小层级越大
    local layer = math_ceil(baseLayerValue + (self.mapDataForLayer.maxMapX - posX) +
        (self.mapDataForLayer.maxMapY - posY * self.mapDataForLayer.posYRate))
    layer = layer > 32767 and 32767 or layer
    return layer
end

---显示格子坐标
function View:ShowTileMap()
    local isShow = CS.SROptionsData.IsShowTileMapEnable()
    self.mapUnlockAreaMgr:ShowMapGizmos(isShow)
    self:ShowAreaInfo(isShow)
end

---获取场景跟节点
---@return UnityEngine.Transform
function View:GetSceneRoot(name)
    if name == nil then
        return self.args.tr_SceneRoot
    end

    local tf = self.sceneRoot[name]
    if not util.isNull(tf) then
        return tf
    end

    tf = self.args.tr_SceneRoot:Find(name)
    if util.isNull(tf) then
        Log:Warn('[MainSceneMapView:GetSceneRoot] 找不到场景节点：{0}', name)
        return self.args.tr_SceneRoot
    end

    self.sceneRoot[name] = tf
    return tf
end

---获取相机视野范围
---@return number[]
function View:GetCameraFieldOfView()
    if not self.mapUnlockAreaMgr then
        return
    end
    return self.mapUnlockAreaMgr:GetCameraShownView()
end

---获取相机坐标
---@return number, number
function View:GetCameraPos()
    if not self.mapUnlockAreaMgr then
        return
    end
    return self.mapUnlockAreaMgr:GetCameraPos()
end

---获取相机视野缩放比
---@return number
function View:GetOrthographicSizeScale()
    return self.args.sceneCamera.orthographicSize / self.initCameraSize
end

---获取相机
---@return UnityEngine.Camera, UnityEngine.Camera 场景相机，ui相机
function View:GetCameras()
    return self.args.sceneCamera, self.uiCamera
end

---设置所有npc状态
---@param type number 类型 0:隐藏所有 1:隐藏居民 2:隐藏隐士 3:隐藏政策 4:隐藏菜狗 5:隐藏桃花
---@param isActive boolean 是否显示
function View:SetNpcState(type, isActive)
    if type == 0 then
        GameObjectUtil_Active(self.args.tr_NpcRoot, isActive)
        return
    end

    if type == 1 then
        GameObjectUtil_Active(self.args.tr_VillagerRoot, isActive)
        return
    end

    if type == 2 then
        GameObjectUtil_Active(self.args.tr_HeroRoot, isActive)
        return
    end

    if type == 3 then
        GameObjectUtil_Active(self.args.tr_PolicyRoot, isActive)
        return
    end

    if type == 4 then
        GameObjectUtil_Active(self.args.tr_DogFoodRoot, isActive)
        return
    end

    if type == 5 then
        GameObjectUtil_Active(self.args.tr_SaveGodRoot, isActive)
        return
    end
end

---获取地图背景的尺寸大小
function View:GetTileBgSize()
    if self._tileBgSize then
        return self._tileBgSize
    end

    local halfTileWidthPixles = self.settings.tileWidthPixles / 2 / 100
    local halfTileHeightPixles = self.settings.tileHeightPixles / 2 / 100
    self._tileBgSize = { halfTileWidthPixles, halfTileWidthPixles, halfTileHeightPixles, halfTileHeightPixles }
    return self._tileBgSize
end

---获取地图大小 unity单位
---@return number, number
function View:GetMapSize()
    if not self.mapUnlockAreaMgr then
        return 0, 0
    end
    local mapMinPosX, mapMaxPosX, mapMinPosY, mapMaxPosY = self.mapUnlockAreaMgr:GetMapPosLimit()
    return mapMaxPosX - mapMinPosX, mapMaxPosY - mapMinPosY
end

---重置moveDeltaData字段
function View:ResetMoveDelta()
    if self.moveDeltaData ~= nil then
        self.moveDeltaData.x = 0
        self.moveDeltaData.y = 0
    end
end

---保存相机状态（导演系统用）
function View:SaveCameraStateForCutscene()
    if not self.mapUnlockAreaMgr then
        return
    end
    self.cameraPosXForCutscene, self.cameraPosYForCutscene = self.mapUnlockAreaMgr:GetCameraPos()
    self.cameraSizeForCutscene = self.mapUnlockAreaMgr:GetCameraSize()
end

---设置相机视野大小（导演系统用）
---@param size number 设置的大小
---@param finCallback fun() 完成回调
---@param duration number 动画持续时间，传空或≤0 则无动画
function View:SetCameraSizeForCutscene(size, finCallback, duration)
    if self.sizeChangeEndForCS then
        self.sizeChangeEndForCS()
    end

    size = size < 1 and 1 or size
    size = size > self.settings.cameraMaxZoom and self.settings.cameraMaxZoom or size
    local targetSize = size
    -- 只有目标视野大于当前视野才需要触发地图刷新事件
    local curSize = self.args.sceneCamera.orthographicSize
    local needRefresh = curSize < targetSize

    self.sizeChangeEndForCS = function()
        self.sizeChangeEndForCS = nil
        self:KillCSizeChangeForCsTweener()
        self.args.sceneCamera.orthographicSize = targetSize
        if needRefresh then
            self:OnCameraFieldChange()
        end
        if finCallback then
            finCallback()
        end
    end

    -- 不需要过渡效果
    if duration == nil or duration <= 0 then
        self.sizeChangeEndForCS()
        return
    end

    ---@type DG.Tweening.Tweener
    self.cameraSizeChangeForCsTweener = self.args.sceneCamera:DOOrthoSize(targetSize, duration):SetEase(Ease.Linear)
        :OnUpdate(function()
            if needRefresh then
                self:OnCameraFieldChange()
            end
        end)
        :OnComplete(function()
            self.sizeChangeEndForCS()
        end)
end

---相机移动（导演系统用）
---@param worldPos UnityEngine.Vector3 目标位置
---@param finCallback fun() 回调函数
---@param speed boolean|number 摄像机移动速度,true|nil 为默认速度 false|≤0为瞬移
function View:DoCameraMoveForCutscene(worldPos, finCallback, speed)
    if not worldPos then
        if finCallback then
            finCallback()
        end
        return
    end

    if self.cameraMoveEndForCutscene then
        self.cameraMoveEndForCutscene()
    end

    worldPos = self:GetTargetPosForCutScene(worldPos)

    self.cameraMoveEndForCutscene = function()
        self:OnCameraFieldChange()
        self.cameraMoveEndForCutscene = nil
        self:KillCameraMoveForCsTweener()
        self:SetWorldPosForCutscene(worldPos)
        if finCallback then
            finCallback()
        end
    end

    -- 默认速度
    if speed == nil or speed == true then
        speed = self.settings.cameraMoveSpeed or 0
    end
    -- 直接瞬移
    if speed == false or speed <= 0 then
        self.cameraMoveEndForCutscene()
        return
    end

    worldPos.z = self.initCameraPos.z
    local distance = math.abs((worldPos - self.args.sceneCamera.transform.localPosition).magnitude)
    local duration = distance / speed

    ---@type DG.Tweening.Tweener
    self.cameraMoveForCsTweener = self.args.sceneCamera.transform:DOLocalMove(worldPos, duration):SetEase(Ease.Linear)
        :OnUpdate(function()
            self.mapUnlockAreaMgr:SetCameraPos(self.args.sceneCamera.transform.localPosition)
            self:OnCameraFieldChange()
        end)
        :OnComplete(function()
            self.cameraMoveEndForCutscene()
        end)
end

---设置相机坐标（导演系统用）
---@param worldPos UnityEngine.Vector3
function View:SetWorldPosForCutscene(worldPos)
    if not worldPos then
        return
    end

    -- 忽略开荒区域，只做地图边界限制
    worldPos = self:GetTargetPosForCutScene(worldPos)
    self.mapUnlockAreaMgr:SetCameraPos(worldPos)
    self.args.sceneCamera.transform:SetLocalPosition(worldPos.x, worldPos.y, self.initCameraPos.z)
    self:OnCameraFieldChange()
end

---重置相机视野和坐标（导演系统用）
function View:ResetForCutscene()
    -- 判断所处坐标是否合法
    local minSize = self.settings.cameraMinZoom
    local maxSize = self.settings.cameraMaxZoom
    local curSize = self.args.sceneCamera.orthographicSize
    if curSize < minSize or curSize > maxSize then
        curSize = self.cameraSizeForCutscene or minSize
    end

    self.mapUnlockAreaMgr:ResetCameraSize(curSize)
    local pos = self.args.sceneCamera.transform.localPosition
    local isPosValid = self.mapUnlockAreaMgr:IsPosValid(pos)

    -- 如果当前视野是合法的，就不修改
    if isPosValid then
        self.args.sceneCamera.orthographicSize = curSize
        self:DoCameraMove(pos, nil, false)
        return
    end

    -- 不合法，尝试移动到之前位置
    curSize = self.cameraSizeForCutscene or minSize
    self.mapUnlockAreaMgr:ResetCameraSize(curSize)
    pos = { x = self.cameraPosXForCutscene or 0, y = self.cameraPosYForCutscene or 0, z = self.initCameraPos.z }
    isPosValid = self.mapUnlockAreaMgr:IsPosValid(pos)

    -- 之前记录的位置合法，就修改到之前的位置
    if isPosValid then
        self.args.sceneCamera.orthographicSize = curSize
        self:DoCameraMove(pos, nil, false)
        return
    end

    -- 都不合法，则重置到默认位置
    Log:Warn("导演系统重置相机视野到默认位置")
    self.mapUnlockAreaMgr:ResetCameraSize(self.initCameraSize)
    self.args.sceneCamera.orthographicSize = self.initCameraSize
    self:DoCameraMove(self.initCameraPos, nil, false)
end

---获取目标位置，只做地图边界限制（导演系统用）
---@param worldPos UnityEngine.Vector3
---@return UnityEngine.Vector3
---@private
function View:GetTargetPosForCutScene(worldPos)
    local mapMinPosX, mapMaxPosX, mapMinPosY, mapMaxPosY = self.mapUnlockAreaMgr:GetMapPosLimit()
    if worldPos.x < mapMinPosX then
        worldPos.x = mapMinPosX
    elseif worldPos.x > mapMaxPosX then
        worldPos.x = mapMaxPosX
    end
    if worldPos.y < mapMinPosY then
        worldPos.y = mapMinPosY
    elseif worldPos.y > mapMaxPosY then
        worldPos.y = mapMaxPosY
    end
    return worldPos
end

---关闭相机视野变化动画（导演系统）
---@private
function View:KillCSizeChangeForCsTweener()
    if self.cameraSizeChangeForCsTweener then
        self.cameraSizeChangeForCsTweener:Kill()
        self.cameraSizeChangeForCsTweener = nil
    end
end

---关闭相机移动动画（导演系统）
---@private
function View:KillCameraMoveForCsTweener()
    if self.cameraMoveForCsTweener then
        self.cameraMoveForCsTweener:Kill()
        self.cameraMoveForCsTweener = nil
    end
end

------------------------------------- Private Func -------------------------------------

---初始化地图解锁区域管理器
---@private
function View:AwakeForMapUnlockAreaMgr()
    ---@type MapUnlockAreaMgrParams
    local params = {}
    params.go_SceneRoot = self.gameObject
    params.cameraZoomCoefficient = self.settings.cameraZoomCoefficient
    params.initCameraSize = self.initCameraSize
    params.cameraMinZoom = self.settings.cameraMinZoom
    params.cameraMaxZoom = self.settings.cameraMaxZoom
    params.sceneCamera = self.args.sceneCamera
    params.tileWidthCount = self.settings.tileWidthCount
    params.tileHeightCount = self.settings.tileHeightCount
    params.centerTileX = self.settings.centerTileX
    params.centerTileY = self.settings.centerTileY
    params.tileWidthPixles = self.settings.tileWidthPixles
    params.gizmos_camera = self.args.gizmos_camera
    params.freeMove = self.settings.freeMove
    self.mapUnlockAreaMgr = MapUnlockAreaMgr.New(params)
    self.mapUnlockAreaMgr:Init()
end

--重新设置相机位置
---@private
function View:AwakeForResetCameraPos()
    -- 校验当前相机位置是否正确
    local pos = self.args.sceneCamera.transform.localPosition
    local isPosValid = self.mapUnlockAreaMgr:IsPosValid(pos)

    -- 当前相机位置正常
    if isPosValid == true then
        return
    end

    -- 尝试找到较近的正确的坐标
    local targetPos = self.mapUnlockAreaMgr:GetTargetPosForMove(pos)
    if not targetPos then
        Log:Warn("MainSceneView：相机坐标设置异常，重置为初始位置")
        -- 重置相机为默认设置
        self.mapUnlockAreaMgr:SetCameraPos(self.initCameraPos)
        self.args.sceneCamera.transform:SetLocalPosition(self.initCameraPos.x, self.initCameraPos.y, self.initCameraPos.z)
        self.args.sceneCamera.orthographicSize = self.initCameraSize
        self:OnCameraFieldChange()
        return
    end

    Log:Warn("MainSceneView：相机坐标设置异常，重置到最近的正确的位置")
    -- 直接设置为相近坐标
    self.mapUnlockAreaMgr:SetCameraPos(targetPos)
    self.args.sceneCamera.transform:SetLocalPosition(targetPos.x, targetPos.y, self.initCameraPos.z)
    self:OnCameraFieldChange()
end

---加载AreaInfo
---@param isShow boolean 是否激活
---@private
function View:ShowAreaInfo(isShow)
    -- 加载
    if isShow == true then
        local path = "Res/Widgets/MainScene/RefByScript/Utils/AreaInfo.prefab"
        ResMgr:LoadAsync(path, function(asset)
            if not asset then
                return
            end

            self.areaInfoInst = GameObject.Instantiate(asset, self.transform)
            local isShow = CS.SROptionsData.IsShowTileMapEnable()
            if isShow == false then
                self:DestroyAreaInfo()
            end
        end)
        return
    end

    -- 销毁
    self:DestroyAreaInfo()
end

---销毁AreaInfo实例
---@private
function View:DestroyAreaInfo()
    if not util.isNull(self.areaInfoInst) == true then
        GameObject.Destroy(self.areaInfoInst)
        self.areaInfoInst = nil
    end
end

---销毁区域画线工具
---@private
function View:DestroyMapGizmos()
    if self.mapUnlockAreaMgr then
        self.mapUnlockAreaMgr:ShowMapGizmos(false)
    end
end

---添加监听
---@private
function View:AddListener()
    self.OnPointerMoveCallback = function(inputData)
        self:OnPointerMove(inputData)
    end
    inputMgr:OnPointerMoveHandler('+', self.OnPointerMoveCallback)

    self.OnZoomingCallback = function(delta)
        self:OnZooming(delta)
    end
    inputMgr:OnZoomingHandler('+', self.OnZoomingCallback)

    self.OnPointerUpCallback = function()
        self:OpenAmbleTaskInfo()
    end
    inputMgr:OnPointerUpHandler('+', self.OnPointerUpCallback)
end

---移动事件
---@param inputData Game.InputMgr.PointerInputData 输入相关数据
---@private
function View:OnPointerMove(inputData)
    if inputData == nil or inputData.delta == nil then
        return
    end

    --滑动距离判断
    if inputData.delta.magnitude ~= nil and inputData.delta.magnitude < 0.1 then
        return
    end
    ---建造模式移动建筑的情况下，不响应移动
    if ModelFactory.VillageScene.isBuildingMode == true then
        return
    end
    ---判断是否输入交互于指定层级外的物体
    if InputUtil_PointerOverTargetGameObject(8) then
        return
    end

    --有引导时不划动
    if Game.Guide:IsActivated() then
        return
    end

    local deltaX = inputData.delta.x * self.rate
    local deltaY = inputData.delta.y * self.rate

    -- 限制最大可滑动距离
    local maxMoveDistance = self.settings.maxMoveDistance
    if deltaX > maxMoveDistance then
        deltaX = maxMoveDistance
    elseif deltaX < -maxMoveDistance then
        deltaX = -maxMoveDistance
    end
    if deltaY > maxMoveDistance then
        deltaY = maxMoveDistance
    elseif deltaY < -maxMoveDistance then
        deltaY = -maxMoveDistance
    end

    -- 关闭缓行任务
    self:CloseAmbleTaskInfo()
    -- 判断是否能够移动
    ---@type DoMoveReturn
    local doMoveReturn = self.mapUnlockAreaMgr:DoMove(deltaX, deltaY)
    if doMoveReturn.canMove == false then
        self.moveDeltaData.x = 0
        self.moveDeltaData.y = 0
        doMoveReturn = nil
        return
    end

    self.moveDeltaData.x = deltaX
    self.moveDeltaData.y = deltaY
    self.args.sceneCamera.transform:SetLocalPosition(doMoveReturn.cameraPosX, doMoveReturn.cameraPosY,
        self.initCameraPos.z)

    -- 摄像机视野变化
    self:OnCameraFieldChange()
    doMoveReturn = nil
end

---缩放事件
---@param delta System.Single 缩放差值
---@private
function View:OnZooming(delta)
    ---判断是否输入交互于指定层级外的物体
    if InputUtil_PointerOverTargetGameObject(8) then
        return
    end

    --有引导时不缩放
    if Game.Guide:IsActivated() then
        return
    end

    ---@type DoZoomingReturn
    local doZoomingReturn = self.mapUnlockAreaMgr:DoZooming(delta)
    if doZoomingReturn.canZooming == false then
        doZoomingReturn = nil
        return
    end

    self.args.sceneCamera.orthographicSize = doZoomingReturn.orthographicSize
    self:GetDragRate(doZoomingReturn.orthographicSize)

    -- 需要调整坐标
    if doZoomingReturn.needRefreshPos == true then
        self.args.sceneCamera.transform:SetLocalPosition(doZoomingReturn.cameraPosX, doZoomingReturn.cameraPosY,
            self.initCameraPos.z)
    end

    -- 停止缓行
    self:CloseAmbleTaskInfo()
    -- 摄像机视野变化
    self:OnCameraFieldChange()
    doZoomingReturn = nil
end

---移除监听
---@private
function View:RemoveListener()
    inputMgr:OnPointerMoveHandler('-', self.OnPointerMoveCallback)
    inputMgr:OnZoomingHandler('-', self.OnZoomingCallback)
    inputMgr:OnPointerUpHandler('-', self.OnPointerUpCallback)
end

---摄像机视野变化
---@private
function View:OnCameraFieldChange()
    self:RefreshMapGuideUI()
    MainSceneMgr:FireEvent(MainSceneMgr.EventNameEnum.UpdateAoi)
end

---获取滑动比例
---@param orthographicSize number
---@private
function View:GetDragRate(orthographicSize)
    self.rate = orthographicSize * 2 / self.screenHeight
end

---开启缓行任务
---@private
function View:OpenAmbleTaskInfo()
    self:CloseAmbleTaskInfo()
    ---判断是否输入交互于指定层级外的物体
    if InputUtil_PointerOverTargetGameObject(8) then
        return
    end
    if self.moveDeltaData == nil or (self.moveDeltaData.x == 0 and self.moveDeltaData.y == 0) then
        return
    end

    ---开始惯性滑行
    local math_abs = math.abs
    self.moveDeltaData = self.moveDeltaData / UE.Time.deltaTime -- 还原最后一帧的加速度
    local rate = 0.37 --值越小，惯性越大
    self.ambleTaskInfo = TaskScheduler.Schedule(function()
        if self.moveDeltaData == nil or math_abs(self.moveDeltaData.magnitude) < 0.05 then
            -- 滑行任务结束
            self.ambleTaskInfo = nil
            return false
        end
        self.moveDeltaData = self.moveDeltaData * (1 - rate)
        local offset = self.moveDeltaData * UE.Time.deltaTime
        -- 不能移动
        local doMoveReturn = self.mapUnlockAreaMgr:DoMove(offset.x, offset.y, true)
        if doMoveReturn.canMove == false then
            doMoveReturn = nil
            self.ambleTaskInfo = nil
            return false
        end
        self.args.sceneCamera.transform:SetLocalPosition(doMoveReturn.cameraPosX, doMoveReturn.cameraPosY,
            self.initCameraPos.z)
        -- 刷新视图
        self:OnCameraFieldChange()
        doMoveReturn = nil
        return true
    end)
end

---关闭缓行任务
---@private
function View:CloseAmbleTaskInfo()
    if self.ambleTaskInfo then
        TaskScheduler.UnSchedule(self.ambleTaskInfo)
        self.ambleTaskInfo = nil
    end
end

---关闭移动动画
---@private
function View:KillTweener()
    if self.sceneMoveTweener then
        self.sceneMoveTweener:Kill()
        self.sceneMoveTweener = nil
    end
end

--------------------------------------------- 村落小人npc ---------------------------------------------

---获取气泡实例
---@return NpcPopupWorldSpaceView
function View:GetNpcPopupInst()
    if not self.npcPopupPool then
        return nil
    end
    return self.npcPopupPool:Get()
end

---回收气泡实例
---@param popupView NpcPopupWorldSpaceView
function View:RecycleNpcPopupInst(popupView)
    if not self.npcPopupPool then
        return
    end

    self.npcPopupPool:Recycle(popupView)
end

---初始化npc管理器【Awake调用】
---@private
function View:AwakeForAOINpcMgr()
    ---@type aoiNpcMgr
    self.aoiNpcMgr = util_relativeRequire("AOIMgr.aoiNpcMgr")
    self.aoiNpcMgr.tr_PoolRoot = self.args.tr_PoolRoot
    self.aoiNpcMgr.tr_VillagerRoot = self.args.tr_VillagerRoot
    self.aoiNpcMgr.tr_HeroRoot = self.args.tr_HeroRoot
    self.aoiNpcMgr.tr_PolicyRoot = self.args.tr_PolicyRoot
    self.aoiNpcMgr.tr_DogFoodRoot = self.args.tr_DogFoodRoot
    self.aoiNpcMgr.tr_SaveGodRoot = self.args.tr_SaveGodRoot
    self.aoiNpcMgr.villagerTemplate = self.args.villagerTemplate
    self.aoiNpcMgr.heroTemplate = self.args.heroTemplate
    self.aoiNpcMgr.policyNpcTemplate = self.args.policyNpcTemplate
    self.aoiNpcMgr.dogFoodNPCTemplate = self.args.dogFoodNPCTemplate
    self.aoiNpcMgr.saveGodNPCTemplate = self.args.saveGodNPCTemplate
    self.aoiNpcMgr:Awake()
end

---释放地图解锁区域管理器【Destroy】
---@private
function View:DestroyMapUnlockAreaMgr()
    if self.mapUnlockAreaMgr then
        self.mapUnlockAreaMgr:Shut()
        self.mapUnlockAreaMgr = nil
    end
end

---初始化npc管理器【OnEnable】
---@private
function View:InitAOINpcMgr()
    if self.aoiNpcMgr then
        self.aoiNpcMgr:OnEnable()
    end
end

---释放npc管理器【OnDisable】
---@private
function View:ShutAOINpcMgr()
    if self.aoiNpcMgr then
        self.aoiNpcMgr:OnDisable()
    end
end

---销毁npc管理器【OnDestroy】
---@private
function View:DestroyAOINpcMgr()
    if self.aoiNpcMgr then
        self.aoiNpcMgr:OnDestroy()
        self.aoiNpcMgr = nil
    end
    if self.npcPopupPool then
        self.npcPopupPool:Release()
        self.npcPopupPool = nil
    end
end

--------------------------------------------- 天空装饰物 ---------------------------------------------

---初始化天空装饰物管理器【Awake调用】
---@private
function View:AwakeForSkyDecoMgr()
    ---@type SkyDecoMgr
    self.skyDecoMgr = util_relativeRequire("SkyDeco.SkyDecoMgr")
    self.skyDecoMgr:Init(self.args.SettingsView, self.mapUnlockAreaMgr, self.args.tr_CloudRoot, self.args.tr_BirdRoot)
end

---释放天空装饰物管理器【OnDestroy调用】
---@private
function View:DestroySkyDecoMgr()
    if self.skyDecoMgr then
        self.skyDecoMgr:Shut()
    end
end

-------------------------------------------- 地图指引器 --------------------------------------------

---获取地图指示器控制类
---@param key string
---@return MapGuideSceneUIView
function View:GetMapGuideUITemplate(key)
    if not self.guideUIPool then
        self.guideUIPool = ObjectPool.New()
        self.guideUIPool:SetParent(self.args.go_MapGuideUIRoot.transform)
        self.guideUIPool:SetTemplate(self.args.lt_MapGuideUI)
    end

    key = key or "_"
    local guideUI = self.guideUIPool:Get(nil, true, self.args.go_MapGuideUIRoot.transform)
    self.guideUIDic[key] = guideUI
    return guideUI
end

---回收地图指示器
---@param key string
function View:RecycleMapGuideUI(key)
    if not self.guideUIPool then
        return
    end

    local guideUI = self.guideUIDic[key]
    if guideUI then
        self.guideUIPool:Recycle(guideUI)
        self.guideUIDic[key] = nil
    end
end

---回收所有的地图指示器
---@private
function View:RecycleAllMapGuideUI()
    if self.guideUIPool and self.guideUIDic then
        for guideUI, isNew in pairs(self.guideUIDic) do
            if isNew then
                self.guideUIPool:Recycle(guideUI)
            end
        end
        self.guideUIDic = {}
    end
end

---设置地图指引器状态
---@param isActive boolean 是否显示
function View:SetGuideUIState(isActive)
    GameObjectUtil_Active(self.args.go_MapGuideUIRoot, isActive)
end

---初始化地图指引器
---@private
function View:InitMapGuideUI()
    ---@type MapGuideUICtrlMgr
    self.mapGuideUICtrlMgr = util_relativeRequire("MapGuideUI.MapGuideUICtrlMgr")
    self.mapGuideUICtrlMgr:Init()
end

---刷新地图指引器
---@private
function View:RefreshMapGuideUI()
    if self.mapGuideUICtrlMgr then
        self.mapGuideUICtrlMgr:RefreshMapGuideUI()
    end
end

---释放地图指引器
---@private
function View:DisposeMapGuideUI()
    if self.mapGuideUICtrlMgr then
        self.mapGuideUICtrlMgr:DisposeMapGuideUI()
    end
end

--
return View
