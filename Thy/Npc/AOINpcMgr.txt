---实现场景上的NPC管理
---@class aoiNpcMgr
local aoiNpcMgr = {
    ---@type UnityEngine.Transform
    tr_PoolRoot = nil,
    ---@type UnityEngine.Transform
    tr_VillagerRoot = nil,
    ---@type UnityEngine.Transform
    tr_HeroRoot = nil,
    ---@type UnityEngine.Transform
    tr_PolicyRoot = nil,
    ---@type UnityEngine.Transform
    tr_DogFoodRoot = nil,
    ---@type UnityEngine.Transform
    tr_SaveGodRoot = nil,
    ---@type XLua.LuaTarget
    villagerTemplate = nil,
    ---@type XLua.LuaTarget
    heroTemplate = nil,
    ---@type XLua.LuaTarget
    policyNpcTemplate = nil,
    ---@type XLua.LuaTarget
    dogFoodNPCTemplate = nil,
    ---@type XLua.LuaTarget
    saveGodNPCTemplate = nil,
}

---居民npc对象池
---@type ObjectPool
local villagerPool
---隐士npc对象池
---@type ObjectPool
local heroPool
---政策npc对象池
---@type ObjectPool
local policyNpcPool
---菜狗鸡精npc对象池
---@type ObjectPool
local dogFoodNpcPool
---醉酒大仙npc对象池
---@type ObjectPool
local saveGodNpcPool
---npc对应的npcView容器
---@type table<number, NpcView>
local npcViewDic
---在相机显示范围内的npc
---@type table<number, NpcData>
local shownNpcDataDic
---npc类型
---@type MainSceneNpcType
local MainSceneNpcType

---初始化数据【Awake调用】
function aoiNpcMgr:Awake()
    npcViewDic = {}
    shownNpcDataDic = {}

    villagerPool = ObjectPool.New()
    villagerPool:SetParent(self.tr_PoolRoot)
    villagerPool:SetTemplate(self.villagerTemplate)
    heroPool = ObjectPool.New()
    heroPool:SetParent(self.tr_PoolRoot)
    heroPool:SetTemplate(self.heroTemplate)
    policyNpcPool = ObjectPool.New()
    policyNpcPool:SetParent(self.tr_PoolRoot)
    policyNpcPool:SetTemplate(self.policyNpcTemplate)
    dogFoodNpcPool = ObjectPool.New()
    dogFoodNpcPool:SetParent(self.tr_PoolRoot)
    dogFoodNpcPool:SetTemplate(self.dogFoodNPCTemplate)
    saveGodNpcPool = ObjectPool.New()
    saveGodNpcPool:SetParent(self.tr_PoolRoot)
    saveGodNpcPool:SetTemplate(self.saveGodNPCTemplate)
end

---初始化
function aoiNpcMgr:OnEnable()
    MainSceneNpcType = ModelFactory.MainSceneNpc.NpcType
    self:AddListener()
end

---释放
function aoiNpcMgr:OnDisable()
    self:RemoveListener()

    if shownNpcDataDic then
        -- 重置npc相关数据
        for npcId, _ in pairs(shownNpcDataDic) do
            self:DestroyNpcView(npcId)
        end
        shownNpcDataDic = {}
    end

    npcViewDic = {}
end

---释放
function aoiNpcMgr:OnDestroy()
    shownNpcDataDic = nil
    npcViewDic = nil

    if villagerPool then
        villagerPool:Release()
        villagerPool = nil
    end
    if heroPool then
        heroPool:Release()
        heroPool = nil
    end
    if policyNpcPool then
        policyNpcPool:Release()
        policyNpcPool = nil
    end
    if dogFoodNpcPool then
        dogFoodNpcPool:Release()
        dogFoodNpcPool = nil
    end
    if saveGodNpcPool then
        saveGodNpcPool:Release()
        saveGodNpcPool = nil
    end
end

---更新在相机视野范围内的npc
---@param npcId number
---@param isShow boolean
---@private
function aoiNpcMgr:UpdateShownNpcView(npcId, isShow)
    -- 需要显示的情况
    if isShow then
        -- 已经显示了
        if shownNpcDataDic[npcId] then
            return
        end

        self:CreateNpcView(npcId)
        return
    end

    -- 需要隐藏的情况
    -- 没有显示
    if not shownNpcDataDic[npcId] then
        return
    end

    self:DestroyNpcView(npcId)
end

---销毁NpcView对象
---@param npcId number
---@private
function aoiNpcMgr:DestroyNpcView(npcId)
    ---@type MainSceneNpcData
    local data = ModelFactory.MainSceneNpc:GetNpcTypeData(npcId)
    ---@type NpcView
    local npcView = npcViewDic[npcId]
    npcViewDic[npcId] = nil
    if npcView then
        if data.type == MainSceneNpcType.Villager then
            villagerPool:Recycle(npcView)
        elseif data.type == MainSceneNpcType.Hero then
            heroPool:Recycle(npcView)
        elseif data.type == MainSceneNpcType.PolicyNpc then
            policyNpcPool:Recycle(npcView)
        elseif data.type == MainSceneNpcType.DogFoodNpc then
            dogFoodNpcPool:Recycle(npcView)
        elseif data.type == MainSceneNpcType.SaveGodNpc then
            saveGodNpcPool:Recycle(npcView)
        end

        npcView:Disposed()
        npcView = nil
    end

    ---@type NpcData
    local npcData = shownNpcDataDic[npcId]
    shownNpcDataDic[npcId] = nil
    if npcData then
        npcData:UnbindNpcView()
        npcData = nil
    end
end

---创建NpcView对象
---@param npcId number
---@private
function aoiNpcMgr:CreateNpcView(npcId)
    local npcData = ModelFactory.MainSceneNpc:GetNpcDataById(npcId)
    if not npcData then
        return
    end

    ---@type MainSceneNpcData
    local data = ModelFactory.MainSceneNpc:GetNpcTypeData(npcId)
    ---@type NpcView
    local npcView = nil
    if data.type == MainSceneNpcType.Villager then
        npcView = villagerPool:Get(nil, true, self.tr_VillagerRoot)
    elseif data.type == MainSceneNpcType.Hero then
        npcView = heroPool:Get(nil, true, self.tr_HeroRoot)
    elseif data.type == MainSceneNpcType.PolicyNpc then
        npcView = policyNpcPool:Get(nil, true, self.tr_PolicyRoot)
    elseif data.type == MainSceneNpcType.DogFoodNpc then
        npcView = dogFoodNpcPool:Get(nil, true, self.tr_DogFoodRoot)
    elseif data.type == MainSceneNpcType.SaveGodNpc then
        npcView = saveGodNpcPool:Get(nil, true, self.tr_SaveGodRoot)
    end
    ---@type UnityEngine.GameObject
    local npcGo = npcView.gameObject
    npcGo.name = data.type == ModelFactory.MainSceneNpc.NpcType.PolicyNpc and data.policyId or data.id
    npcViewDic[npcId] = npcView
    -- npcData赋值
    npcData:BindNpcView(npcView)
    shownNpcDataDic[npcId] = npcData
    npcView:Init(npcId, npcData.curPos)
end

---添加监听
---@private
function aoiNpcMgr:AddListener()
    local EventNameEnum = ModelFactory.MainSceneNpc.EventNameEnum
    self.updateNpcCallback = ModelFactory.MainSceneNpc:OnEvent(EventNameEnum.UpdateNpc, function(dic)
        if dic then
            for npcId, isShow in pairs(dic) do
                self:UpdateShownNpcView(npcId, isShow)
            end
        end
    end)
    self.destroyNpcCallback = ModelFactory.MainSceneNpc:OnEvent(EventNameEnum.DestroyNpc, function(npcId)
        self:DestroyNpcView(npcId)
    end)
end

---移除监听
---@private
function aoiNpcMgr:RemoveListener()
    if self.updateNpcCallback then
        self.updateNpcCallback()
        self.updateNpcCallback = nil
    end
    if self.destroyNpcCallback then
        self.destroyNpcCallback()
        self.destroyNpcCallback = nil
    end
end

return aoiNpcMgr
